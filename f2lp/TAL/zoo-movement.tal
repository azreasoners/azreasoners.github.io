//%%% CHANGING POSITION %%%


//:- constants
//accessible(position,position)       :: sdFluent.

#feature accessible(position,position) :domain boolean :showname

//caused accessible(P,P1)
//   if neighbor(P,P1) & -[\/G | sides(P,P1,G) & -opened(G)].
//default -accessible(P,P1).
#dep forall position, position1, t [[t] neighbor(position,position1) &
!exists gate [sides(position,position1,gate) & !opened(gate)] ->
	R([t] accessible(position,position1))]

#dom forall position,position1,t [[t] accessible(position,position1) ->
	[t] neighbor(position,position1) & 
	!exists gate [sides(position,position1,gate) & !opened(gate)] ]


//% In one unit of time, an animal can move to one of the posi-
//%  tions accessible from its present one, or stay in the posi-
//%  tion where it is.  Moves to non-accessible positions are 
//%  never possible (lmw)
//%constraint pos(ANML)\=P1 
//%   after pos(ANML)=P & -(P=P1 ++ accessible(P,P1)).

#dom forall animal,position,position1,t [ t < $maxocc & ([t] pos(animal) == position) &
	([t+1] pos(animal) == position1) & position != position1 ->
	[t] accessible(position,position1) ]


//% A concurrent move where animal A moves into a position at the 
//%  same time as animal B moves out of it, is only possible if 
//%  at least one of A and B is a small animal. (lmw)   
//%  Exceptions for (failed) mount actions and certain occurrences
//%  of throwOff -- when thrown human ends up where another large 
//%  animal was (see the first two propositions in '%%% ACTIONS %%%')
//constraint -(pos(ANML)=P & pos(ANML1)\=P)
//   after pos(ANML)\=P & pos(ANML1)=P 
//         & large(ANML) & large(ANML1) unless ab(ANML).

#dom forall animal, animal1, position, t [ t < $maxocc &
([t] !(pos(animal) == position) & pos(animal1) == position) &
([t+1] pos(animal) == position & !(pos(animal1) == position)) -> 
[t] !large(animal) | !large(animal1) ]



//% Two large animals cannot pass through a gate at the same time
//% (neither in the same direction nor opposite directions) (lmw)
//constraint -(pos(ANML)=P1 & pos(ANML1)=P1)
//   after pos(ANML)=P & pos(ANML1)=P & sides(P,P1,G)
//         & large(ANML) & large(ANML1) where ANML@<ANML1.

#dom forall animal, animal1, position, position1, gate, t [
t < $maxocc &
([t] pos(animal) == position & pos(animal1) == position) &
([t+1] pos(animal) == position1 & pos(animal1) == position1) &
[t] sides(position,position1,gate) & animal != animal1 -> 
[t] !large(animal) | !large(animal1) ]


//constraint -(pos(ANML)=P & pos(ANML1)=P1)
//   after pos(ANML)=P1 & pos(ANML1)=P & sides(P,P1,G)
//         & large(ANML) & large(ANML1) where ANML@<ANML1.

#dom forall animal, animal1, position, position1, gate, t [
t < $maxocc &
([t] pos(animal) == position & pos(animal1) == position1) &
([t+1] pos(animal) == position1 & pos(animal1) == position) &
[t] sides(position,position1,gate) & animal != animal1 -> 
[t] !large(animal) | !large(animal1) ]

//% While a gate is closing, an animal cannot pass through it
//constraint -opened(G) ->> pos(ANML)\=P1
//   after pos(ANML)=P & sides(P,P1,G) & opened(G).
#dom forall animal, gate, position, position1, t [
t < $maxocc & ([t] pos(animal) == position) & ([t+1] pos(animal) == position1)
& [t] sides(position,position1,gate) & opened(gate) -> [t+1] opened(gate)]





