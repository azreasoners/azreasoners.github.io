astep(0).
step(0..1).
boolean("t"; "f").
room("r1"; "r2").
instance(1..12).

#domain astep(AI).
#domain instance(ID).

% Probability Distribution
%% Entering a room fails at probability 0.2
@getWeight(1) pf1(AI, ID).
ab("enter_failed", I, ID) :- pf1(I, ID), goto(R, "t", I, ID), ab(I, ID).
%% The robot drops the book at probability 0.1
@getWeight(2) pf2(AI, ID).
ab("drop_book", I, ID) :- pf2(I, ID), hasBook("t", I, ID), ab(I, ID).
%% Picking up fails at probability 0.3
@getWeight(3) pf3(AI, ID).
ab("pickup_failed", I, ID) :- pf3(I, ID), pickup_book("t", I, ID), ab(I, ID).


% UEC
%% Fluents
:- not loc_robot("r1", I, ID), not loc_robot("r2", I, ID), step(I), instance(ID).
:- loc_robot("r1", I, ID), loc_robot("r2", I, ID), step(I), instance(ID).
:- not loc_book("r1", I, ID), not loc_book("r2", I, ID), step(I), instance(ID).
:- loc_book("r1", I, ID), loc_book("r2", I, ID), step(I), instance(ID).
:- not hasBook("t", I, ID), not hasBook("f", I, ID), step(I), instance(ID).
:- hasBook("t", I, ID), hasBook("f", I, ID), step(I), instance(ID).
%% Actions
:- not goto(R, "t", I, ID), not goto(R, "f", I, ID), astep(I), room(R), instance(ID).
:- goto(R, "t", I, ID), goto(R, "f", I, ID), astep(I), room(R), instance(ID).
:- not pickup_book("t", I, ID), not pickup_book("f", I, ID), astep(I), instance(ID).
:- pickup_book("t", I, ID), pickup_book("f", I, ID), astep(I), instance(ID).
:- not putdown_book("t", I, ID), not putdown_book("f", I, ID), astep(I), instance(ID).
:- putdown_book("t", I, ID), putdown_book("f", I, ID), astep(I), instance(ID).

% Effect of Actions
loc_robot(R, I+1, ID) :- goto(R, "t", I, ID), not ab("enter_failed", I, ID), instance(ID).
loc_book(R, I, ID) :- loc_robot(R, I, ID), hasBook("t", I, ID), instance(ID).
hasBook("t", I+1, ID) :- pickup_book("t", I, ID), loc_robot(R, I, ID), loc_book(R, I, ID), not ab("pickup_failed", I, ID), instance(ID).
hasBook("f", I+1, ID) :- putdown_book("t", I, ID), instance(ID).
hasBook("f", I+1, ID) :- ab("drop_book", I, ID), instance(ID).
% Frame Axioms
0{loc_robot(R, I+1, ID)} :- loc_robot(R, I, ID), astep(I), instance(ID).
0{loc_book(R, I+1, ID)} :- loc_book(R, I, ID), astep(I), instance(ID).
0{hasBook(B, I+1, ID)} :- hasBook(B, I, ID), astep(I), instance(ID).

% No Concurrency
:- goto(R1, "t", I, ID), goto(R2, "t", I, ID), astep(I), instance(ID), R1 != R2.
:- goto(R, "t", I, ID), pickup_book("t", I, ID), room(R), astep(I), instance(ID).
:- goto(R, "t", I, ID), putdown_book("t", I, ID), room(R), astep(I), instance(ID).
:- pickup_book("t", I, ID), putdown_book("t", I, ID), astep(I), instance(ID).

% Initial state and actions are exogenous
{loc_robot(R, 0, ID)} :- room(R), instance(ID).
{loc_book(R, 0, ID)} :- room(R), instance(ID).
{hasBook(B, 0, ID) : boolean(B)} :- instance(ID).
{goto(R, B, I, ID) : boolean(B)} :- room(R), astep(I), instance(ID).
{pickup_book(B, I, ID) : boolean(B)} :- astep(I), instance(ID).
{putdown_book(B, I, ID) : boolean(B)} :- astep(I), instance(ID).

% Enable abnormality
{ab(I, ID)} :- step(I), instance(ID).
